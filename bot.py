import os
import json
import gspread
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from google.oauth2.service_account import Credentials
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import matplotlib.pyplot as plt
import io

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN", "").strip()
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "").strip()
credentials_json = os.getenv("CREDENTIALS_JSON", "").strip()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if not TOKEN or not SPREADSHEET_ID or not credentials_json:
    raise ValueError("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

logging.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets API
try:
    credentials_dict = json.loads(credentials_json)
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(credentials_dict, scopes=scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID)
    logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
    raise

# –ü–æ–¥–∫–ª—é—á–∞–µ–º Telegram-–±–æ—Ç–∞
try:
    bot = Bot(token=TOKEN)
    dp = Dispatcher(bot)
    logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    raise

# –°–ª–æ–≤–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
user_to_row = {'question': 2}  # –ü—Ä–∏–º–µ—Ä
user_to_categories = {'question': ["–ù–û–ú–ï–†–ê", "–ü–ï–†–ï–í–û–î–´", "–î–ò–ê–õ–û–ì–ò", "–í–ë–†–û–°"]}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"))
    keyboard.add(KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"))
    return keyboard

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
scheduler = AsyncIOScheduler()
async def send_reminder():
    await bot.send_message(chat_id=123456789, text="–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç! üìù")  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π chat_id
scheduler.add_job(send_reminder, 'cron', hour=18, minute=30, day_of_week='mon-fri')
scheduler.start()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def generate_report_chart(data):
    categories = list(data.keys())
    values = list(data.values())
    fig, ax = plt.subplots()
    ax.bar(categories, values)
    ax.set_xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
    ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–∏—è")
    ax.set_title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—á–µ—Ç–∞–º")
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=create_keyboard())

@dp.message_handler(lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
async def handle_report(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–ù–û–ú–ï–†–ê: 10\n–ü–ï–†–ï–í–û–î–´: 5")

@dp.message_handler(lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
async def show_statistics(message: Message):
    user_name = message.from_user.username
    
    if user_name not in user_to_row:
        await message.reply("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç—á—ë—Ç–∞ ‚ùå")
        return

    row_number = user_to_row[user_name]
    worksheet = sheet.worksheet("–ú–∞—Ä—Ç")
    header = worksheet.row_values(1)
    statistics = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    report_data = {}
    
    for category in user_to_categories.get(user_name, []):
        if category in header:
            col = header.index(category) + 1
            value = worksheet.cell(row_number, col).value or "0"
            statistics += f"{category}: {value}\n"
            report_data[category] = int(value) if value.isdigit() else 0
    
    chart_image = generate_report_chart(report_data)
    await message.answer(statistics)
    await bot.send_photo(message.chat.id, chart_image)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())

